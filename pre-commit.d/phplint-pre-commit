#!/bin/bash
# PHP CodeSniffer pre-commit hook for git
#
# @author Dean Tedesco <dino@tedesco.net.au>
#
# based on intial work provided by
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
#
# see the README

PHPLINT_BIN=`which php` # uses locally installed php cli
PHPLINT_FILE_PATTERN="\.(php)$"

TMP_STAGING=".tmp_staging"

# parse config
CONFIG_FILE=$(dirname $0)/phplint-config
if [ -e ${CONFIG_FILE} ]; then
    . ${CONFIG_FILE}
fi

# simple check if code sniffer is set up correctly
if [ ! -x ${PHPLINT_BIN} ]; then
    echo "PHP bin not found or executable -> $PHPLINT_BIN"
    exit 1
fi

# stolen from template file
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# this is the magic: 
# retrieve all files in staging area that are added, modified or renamed
# but no deletions etc
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR ${against} -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e ${TMP_STAGING} ]; then
    rm -rf ${TMP_STAGING}
fi
mkdir ${TMP_STAGING}

# match files against whitelist
FILES_TO_CHECK=""
for FILE in ${FILES}
do
    echo "$FILE" | egrep -q "$PHPLINT_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be committed and not
# the version in the working directory
STAGED_FILES=""
for FILE in ${FILES_TO_CHECK}
do
  ID=$(git diff-index --cached $against $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname ${FILE})"
  git cat-file blob ${ID} > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done

OUTPUT=$(find -L ${TMP_STAGING} -iregex ".*\.php$" -print0 | xargs -0 -n 1 -P 4 ${PHPLINT_BIN} -l)
RETVAL=$?

# delete temporary copy of staging area
rm -rf ${TMP_STAGING}

if [ ${RETVAL} -ne 0 ]; then
    echo "${OUTPUT//$TMP_STAGING\//}"
fi

exit ${RETVAL}
